GDB USAGE
	> gdb --args myapp arg1 arg2
	> help [command]
	> run
	> break sourcefile.c:80
	> break myfunction
	> info breakpoints
	> delete ->breakpoint number<-
	> watch myvariable
	> info watchpoints
	> delete ->watchpoint number<-
	> continue --> after break
	> step --> step into
	> next
	> finish --> until the end of current function
	> print ->variable<-
	> print/x variable
	> where --> runtime breakpoint
	> backtrace --> use after segfault
	> quit

VALGRIND
	> valgrind --leak-check=full --show-leak-kinds=all <app executable with args>

DMALLOC USAGE
	> add -DDMALLOC in to the Makefile, -DDMALLOC_FUNC_CHECK is optional. This will allow the library to check all of the arguments of a number of common string and utility routines.
	> add -ldmallocth at the end of library list in Makefile
	> Include header like below
		#ifdef DMALLOC
		#include "dmalloc.h"
		#endif
	> add below lines top of the main function
		#ifdef DMALLOC	dmalloc_debug_setup("log-stats,log-non-free,log-trans,check-fence,check-funcs,log=logfile.log");
		dmalloc_log_stats();
		dmalloc_log_unfreed();
		#endif //DMALLOC
	> add below lines at the end of main function;
		#ifdef DMALLOC
		dmalloc_shutdown();
		#endif //DMALLOC
	> then check logfile.log file content

COMPILER STEPS
	> Preprocessing
		> Single big source code generated by string replacemen
		> translation unit or compilation unit
	> compilation
		> Abstraction Syntax Tree generated by C grammar
	> Assembly
		> (dot)s file created which is machine code and assembly based
	> Linking
		> ld is the default linker
		> to create executable by combining object files
		> static linking and dynamic linking (need to loaded running process at runtime)

SORTINGS
	> N2			--> Insertion, Selection, Bubble
	> NLogN			--> Heap, Quick, Merge
	> Below NLogN	--> Counting, Bucket

SEARCHING
	> Linear Search		--> N best - N worst 
	> Binary Search		--> LogN best - N worst
	> Hash Search		--> 1 best - N worst

PROCESS MEMORY LAYOUT
	> BSS segment: uninitialized global variables
	> Data Segment: Initialized global variables and depending on the platform static static variables inside a function
	> Text Segment: Code segment. Machine instructions
	> Stack Segment: After process spawn. Holds function returns, args, fixed lenght local variables
	> Heap Segment: Larger than stack, holds dynamic allocated variables

KERNEL TASKS
	> Process Scheduling -> Round-Robin Time Sharing
	> Memory Management -> Virtual memory management leads to better CPU utilization
	> Provision of a file system
	> Device Accessing
	> Networking

NETWORK LAYERS
	> Physical
	> Data Link: MAC (media access controller) and LLC (logical link conroller) sublayers
	> Network: IP
	> Transport: UDP and TCP
	> Session - Presentation - Application

TCP vs UDP
	> connection oriented, datagram oriented
	> reliable, Not
	> extensive error checking, basic error checking
	> ack segment, no ack segment
	> Sequence of data matters, no ordering data
	> slower, faster
	> retransmit lost packets, not
	> no broadcast, broadcast
	> byte stream, message stream

MAKEFILE
	> -C <dir>		--> changing directory
	> -d			--> print debug logs
	> -I <dir>		--> include header files
	> -j <number>	--> simultaneous jobs
	> -o <name>		--> executable name
	> -Werror		--> shows error
	> -Wall			--> treat warnings as error
	> -g<number>	--> used for development
	> -O<number>	--> optimization
	> -L <dir>		--> library directory
	> -l<name>		--> library name
	> -c			--> creating object file
	> .PHONY: all clean
	> .EXPORT_ALL_VARIABLES
	> .ONESHELL
	> -fPIC -shared		--> create shared library
	> -WL, -rpath=<dir>	--> load and use shared library in runtime

PRINTING FORMATS
	> %d, %i		--> signed int
	> %u			--> unsigned int
	> %hi			--> signed short
	> %hu			--> unsigned short
	> %l, %ld, %li	--> signed long
	> %lu			--> unsigned long
	> %lld			--> signed long long
	> %llu			--> unsigned long long
	> %f			--> float
	> %lf			--> double
	> %Lf			--> long double
	> %8d			--> add space
	> %08d			--> add zero
	> %0.2f			--> specify precision

